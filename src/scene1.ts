/**
 * Welcome screen
 * 
 * Entry page of the game.
 */
import { BaseScene } from 'basescene';
import { Asset, Assets } from '~/assets/assets';

export class Scene1 extends BaseScene {

  private __loadCompleted = false;

  constructor() {
    super({
      key: 'Scene1'
    });
  }

  preload(): void {
    if (!this.__loadCompleted) {
      Assets.getInstance().forEach(this.loadAsset.bind(this));
      this.__loadCompleted = true;
    }
  }

  create(): void {
    this.addButton('Scene2', Assets.IMAGE_BTN_RIGHT,
      function (this: Scene1) {
        this.scene.start('Scene2');
      }, this)
      .setPosition(100, 100)
      .setDisplaySize(50, 50);

    let spine = this.add.spine(200, 300, Assets.SPINE_BOY, "idle", true);
    spine.scale = 0.5;

    spine = this.add.spine(500, 700, Assets.SPINE_BOY, "run", true);
    spine.depth = 2;
    spine.drawDebug = true;
    spine.drawBones = true;
  }

  private loadAsset(asset: Asset, key: string, map: Assets) {
    if (asset.kind == "image") {
      this.load.image(key, asset.url);
    } else if (asset.kind == "spine") {
      // spine assets load the spritesheets implicitly, which is why
      // the loader needs to know the base location og the spritesheet
      this.load.setPath(asset.url);
      // and since the parcel bundler does not handle paths in atlas files, 
      // the bundled files cannot be used for loading atlas. this could
      // be fixed e.g. via parcel plugin that provides spine support.
      // insted, for now, the file names generated by parcel are
      // reversed to the original names, so that they can be loaded
      // from the static folder instead. RRR
      let base = (asset.url2 ? asset.url2 : '').split('.').shift();
      let skeleton: string = base + '.skeleton';
      let atlas: string = base + '.atlas';

      // @ts-ignore
      this.load.spine(key, skeleton, atlas, false);
      //this.load.setPath(path);
    } else {
      throw new Error("Unhandled asset type " + asset.kind + " from " + asset.url);
    }
  }
}
